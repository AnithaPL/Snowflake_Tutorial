--Requirement2:--TNEB-- SELECT INTO (No Cursor)

DROP TABLE IF EXISTS CUSTOMER_CONN_DTLS;
CREATE TABLE CUSTOMER_CONN_DTLS (
    CUSTOMER_ID VARCHAR, 
    EB_NO NUMBER
);

INSERT INTO CUSTOMER_CONN_DTLS VALUES
('CUST001',101),
('CUST001',102),
('CUST002',103),
('CUST003',104),
('CUST003',105),
('CUST004',106),
('CUST005',107);

DROP SEQUENCE IF EXISTS EB_BILL_SEQ;
CREATE SEQUENCE EB_BILL_SEQ; -- is created to generate unique bill numbers automatically.

CREATE OR REPLACE TABLE EB_BILLING_DTLS (
    BILL_NO NUMBER,
    BILL_DT DATE,
    CUST_ID VARCHAR,
    EB_ID NUMBER,
    LAST_MONTH_UNIT NUMBER,
    CURR_MONTH_UNIT NUMBER,
    TARIFF NUMBER,
    BILL_AMT NUMBER
);

INSERT INTO EB_BILLING_DTLS VALUES
(1, CURRENT_DATE, 'CUST001',101,0,0,0,0),
(2, CURRENT_DATE, 'CUST001',102,0,0,0,0),
(3, CURRENT_DATE, 'CUST002',103,0,0,0,0),
(4, CURRENT_DATE, 'CUST003',104,0,0,0,0),
(5, CURRENT_DATE, 'CUST003',105,0,0,0,0),
(6, CURRENT_DATE, 'CUST004',106,0,0,0,0),
(7, CURRENT_DATE, 'CUST005',107,0,0,0,0);


SELECT * FROM CUSTOMER_CONN_DTLS;  
SELECT * FROM EB_BILLING_DTLS;

-- procedure inserts a new bill for a given EB_ID, based on the new current month's reading and tariff rate.
CREATE OR REPLACE PROCEDURE PRC_EB_BILLING_DTLS_SELECT_INTO (
    P_EB_ID NUMBER,                     -- EB number to bill
    P_CURR_MONTH_UNIT NUMBER,           -- current month's meter reading
    P_TARIFF NUMBER                     -- Rate per unit
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
    LV_CUST_ID VARCHAR;
    LV_LAST_MONTH_UNIT NUMBER;
    LV_BILL_DT DATE;
    LV_UNIT_USED NUMBER;
    LV_BILL_AMT NUMBER;
    LV_NEW_BILL_NO NUMBER;
    LV_EXISTS NUMBER;
BEGIN
    -- Validate EB_ID
    SELECT COUNT(*) INTO :LV_EXISTS
    FROM CUSTOMER_CONN_DTLS
    WHERE EB_NO = :P_EB_ID;

    IF (LV_EXISTS = 0) THEN
        RETURN 'INVALID EB_ID';
    END IF;

    -- Fetch latest billing details for this EB_ID
    SELECT
        C.CUSTOMER_ID,
        E.CURR_MONTH_UNIT,
        E.BILL_DT
    INTO
        :LV_CUST_ID,
        :LV_LAST_MONTH_UNIT,
        :LV_BILL_DT
    FROM
        EB_BILLING_DTLS E
        JOIN CUSTOMER_CONN_DTLS C ON E.EB_ID = C.EB_NO
    WHERE
        E.EB_ID = :P_EB_ID
        AND E.BILL_DT = (SELECT MAX(BILL_DT) FROM EB_BILLING_DTLS WHERE EB_ID = :P_EB_ID);

    -- Validate Unit Reading
    IF (:P_CURR_MONTH_UNIT < LV_LAST_MONTH_UNIT) THEN
        RETURN 'CURRENT MONTH VALUE CANNOT BE LESS THAN LAST MONTH UNIT';
    END IF;
    
    -- Calculate
    LV_UNIT_USED := P_CURR_MONTH_UNIT - LV_LAST_MONTH_UNIT;
    LV_BILL_AMT := LV_UNIT_USED * P_TARIFF;

    -- Get next sequence value
    SELECT EB_BILL_SEQ.NEXTVAL INTO :LV_NEW_BILL_NO;

    -- Insert new billing row
    INSERT INTO EB_BILLING_DTLS (
        BILL_NO, BILL_DT, CUST_ID, EB_ID,
        LAST_MONTH_UNIT, CURR_MONTH_UNIT,
        TARIFF, BILL_AMT
    )
    VALUES (
        :LV_NEW_BILL_NO, CURRENT_DATE, :LV_CUST_ID, :P_EB_ID,
        :LV_LAST_MONTH_UNIT, :P_CURR_MONTH_UNIT,
        :P_TARIFF, :LV_BILL_AMT
    );

    RETURN 'SUCCESS: BILL INSERTED';
END;
$$;



CALL PRC_EB_BILLING_DTLS_SELECT_INTO(102, 200, 10);



-- -- Verify Inserted Bill
SELECT * 
FROM EB_BILLING_DTLS 
WHERE EB_ID = 102
ORDER BY BILL_DT DESC;
    
-- -- This should show a new row with:
-- -- LAST_MONTH_UNIT = 150 (from previous bill)
-- -- CURR_MONTH_UNIT = 200
-- -- TARIFF = 10
-- -- BILL_AMT = (200 - 150) * 10 = 500


